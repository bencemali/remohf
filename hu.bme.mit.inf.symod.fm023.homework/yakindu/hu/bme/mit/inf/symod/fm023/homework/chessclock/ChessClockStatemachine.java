/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.inf.symod.fm023.homework.chessclock;

import hu.bme.mit.inf.symod.fm023.homework.ITimer;

public class ChessClockStatemachine implements IChessClockStatemachine {
	protected class SCIButtonsImpl implements SCIButtons {
	
		private boolean modeButton;
		
		public void raiseModeButton() {
			modeButton = true;
			runCycle();
		}
		
		private boolean startButton;
		
		public void raiseStartButton() {
			startButton = true;
			runCycle();
		}
		
		private boolean blackButton;
		
		public void raiseBlackButton() {
			blackButton = true;
			runCycle();
		}
		
		private boolean whiteButton;
		
		public void raiseWhiteButton() {
			whiteButton = true;
			runCycle();
		}
		
		protected void clearEvents() {
			modeButton = false;
			startButton = false;
			blackButton = false;
			whiteButton = false;
		}
	}
	
	protected SCIButtonsImpl sCIButtons;
	
	protected class SCIBeeperImpl implements SCIBeeper {
	
		private SCIBeeperOperationCallback operationCallback;
		
		public void setSCIBeeperOperationCallback(
				SCIBeeperOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	protected SCIBeeperImpl sCIBeeper;
	
	protected class SCIDisplayImpl implements SCIDisplay {
	
		private String text;
		
		public String getText() {
			return text;
		}
		
		public void setText(String value) {
			this.text = value;
		}
		
		private long whiteDisplay;
		
		public long getWhiteDisplay() {
			return whiteDisplay;
		}
		
		public void setWhiteDisplay(long value) {
			this.whiteDisplay = value;
		}
		
		private long blackDisplay;
		
		public long getBlackDisplay() {
			return blackDisplay;
		}
		
		public void setBlackDisplay(long value) {
			this.blackDisplay = value;
		}
		
	}
	
	protected SCIDisplayImpl sCIDisplay;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Kezdeti,
		main_region_White_Initial_Time,
		main_region_Black_Initial_Time,
		main_region_Increment_Time,
		main_region_Vilagos,
		main_region_Sotet,
		main_region_Vilagos_lejart,
		main_region_Sotet_lejart,
		main_region_Game_over,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[6];
	private long increment;
	
	protected void setIncrement(long value) {
		increment = value;
	}
	
	protected long getIncrement() {
		return increment;
	}
	
	private long maxido;
	
	protected void setMaxido(long value) {
		maxido = value;
	}
	
	protected long getMaxido() {
		return maxido;
	}
	
	private long feherinitial;
	
	protected void setFeherinitial(long value) {
		feherinitial = value;
	}
	
	protected long getFeherinitial() {
		return feherinitial;
	}
	
	private long feketeinitial;
	
	protected void setFeketeinitial(long value) {
		feketeinitial = value;
	}
	
	protected long getFeketeinitial() {
		return feketeinitial;
	}
	
	private long fehertemp;
	
	protected void setFehertemp(long value) {
		fehertemp = value;
	}
	
	protected long getFehertemp() {
		return fehertemp;
	}
	
	private long feketetemp;
	
	protected void setFeketetemp(long value) {
		feketetemp = value;
	}
	
	protected long getFeketetemp() {
		return feketetemp;
	}
	
	public ChessClockStatemachine() {
		sCIButtons = new SCIButtonsImpl();
		sCIBeeper = new SCIBeeperImpl();
		sCIDisplay = new SCIDisplayImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCIBeeper.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIBeeper must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCIDisplay.setText("Chess Clock");
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
		
		setIncrement(0);
		
		setMaxido(1200);
		
		setFeherinitial(60);
		
		setFeketeinitial(60);
		
		setFehertemp(0);
		
		setFeketetemp(0);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Kezdeti:
				main_region_Kezdeti_react(true);
				break;
			case main_region_White_Initial_Time:
				main_region_White_Initial_Time_react(true);
				break;
			case main_region_Black_Initial_Time:
				main_region_Black_Initial_Time_react(true);
				break;
			case main_region_Increment_Time:
				main_region_Increment_Time_react(true);
				break;
			case main_region_Vilagos:
				main_region_Vilagos_react(true);
				break;
			case main_region_Sotet:
				main_region_Sotet_react(true);
				break;
			case main_region_Vilagos_lejart:
				main_region_Vilagos_lejart_react(true);
				break;
			case main_region_Sotet_lejart:
				main_region_Sotet_lejart_react(true);
				break;
			case main_region_Game_over:
				main_region_Game_over_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIButtons.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Kezdeti:
			return stateVector[0] == State.main_region_Kezdeti;
		case main_region_White_Initial_Time:
			return stateVector[0] == State.main_region_White_Initial_Time;
		case main_region_Black_Initial_Time:
			return stateVector[0] == State.main_region_Black_Initial_Time;
		case main_region_Increment_Time:
			return stateVector[0] == State.main_region_Increment_Time;
		case main_region_Vilagos:
			return stateVector[0] == State.main_region_Vilagos;
		case main_region_Sotet:
			return stateVector[0] == State.main_region_Sotet;
		case main_region_Vilagos_lejart:
			return stateVector[0] == State.main_region_Vilagos_lejart;
		case main_region_Sotet_lejart:
			return stateVector[0] == State.main_region_Sotet_lejart;
		case main_region_Game_over:
			return stateVector[0] == State.main_region_Game_over;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCIButtons getSCIButtons() {
		return sCIButtons;
	}
	
	public SCIBeeper getSCIBeeper() {
		return sCIBeeper;
	}
	
	public SCIDisplay getSCIDisplay() {
		return sCIDisplay;
	}
	
	/* Entry action for state 'Kezdeti'. */
	private void entryAction_main_region_Kezdeti() {
		sCIDisplay.setText("Ready to play");
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'White Initial Time'. */
	private void entryAction_main_region_White_Initial_Time() {
		sCIDisplay.setText("White initial time");
		
		sCIDisplay.setWhiteDisplay(feherinitial);
		
		setFeketetemp(sCIDisplay.blackDisplay);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'Black Initial Time'. */
	private void entryAction_main_region_Black_Initial_Time() {
		sCIDisplay.setText("Black initial time");
		
		sCIDisplay.setBlackDisplay(feketeinitial);
		
		setFehertemp(sCIDisplay.whiteDisplay);
		
		sCIDisplay.setWhiteDisplay(-1);
	}
	
	/* Entry action for state 'Increment Time'. */
	private void entryAction_main_region_Increment_Time() {
		sCIDisplay.setText("Increment time");
		
		setFehertemp(sCIDisplay.whiteDisplay);
		
		setFeketetemp(sCIDisplay.blackDisplay);
		
		sCIDisplay.setWhiteDisplay(increment);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'Vilagos'. */
	private void entryAction_main_region_Vilagos() {
		timer.setTimer(this, 0, (1 * 1000), true);
		
		timer.setTimer(this, 1, (1 * 1000), true);
		
		timer.setTimer(this, 2, (1 * 1000), true);
		
		sCIDisplay.setText("White moves");
	}
	
	/* Entry action for state 'Sotet'. */
	private void entryAction_main_region_Sotet() {
		timer.setTimer(this, 3, (1 * 1000), true);
		
		timer.setTimer(this, 4, (1 * 1000), true);
		
		timer.setTimer(this, 5, (1 * 1000), true);
		
		sCIDisplay.setText("Black moves");
	}
	
	/* Entry action for state 'Vilagos lejart'. */
	private void entryAction_main_region_Vilagos_lejart() {
		sCIDisplay.setText("White flag fallen");
	}
	
	/* Entry action for state 'Sotet lejart'. */
	private void entryAction_main_region_Sotet_lejart() {
		sCIDisplay.setText("Black flag fallen");
	}
	
	/* Entry action for state 'Game over'. */
	private void entryAction_main_region_Game_over() {
		sCIDisplay.setText("Game over");
	}
	
	/* Exit action for state 'Vilagos'. */
	private void exitAction_main_region_Vilagos() {
		timer.unsetTimer(this, 0);
		
		timer.unsetTimer(this, 1);
		
		timer.unsetTimer(this, 2);
		
		sCIDisplay.setWhiteDisplay((sCIDisplay.whiteDisplay + increment)<=maxido ? (sCIDisplay.whiteDisplay + increment) : maxido);
	}
	
	/* Exit action for state 'Sotet'. */
	private void exitAction_main_region_Sotet() {
		timer.unsetTimer(this, 3);
		
		timer.unsetTimer(this, 4);
		
		timer.unsetTimer(this, 5);
		
		sCIDisplay.setBlackDisplay((sCIDisplay.blackDisplay + increment)<=maxido ? (sCIDisplay.blackDisplay + increment) : maxido);
	}
	
	/* 'default' enter sequence for state Kezdeti */
	private void enterSequence_main_region_Kezdeti_default() {
		entryAction_main_region_Kezdeti();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Kezdeti;
	}
	
	/* 'default' enter sequence for state White Initial Time */
	private void enterSequence_main_region_White_Initial_Time_default() {
		entryAction_main_region_White_Initial_Time();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_White_Initial_Time;
	}
	
	/* 'default' enter sequence for state Black Initial Time */
	private void enterSequence_main_region_Black_Initial_Time_default() {
		entryAction_main_region_Black_Initial_Time();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Black_Initial_Time;
	}
	
	/* 'default' enter sequence for state Increment Time */
	private void enterSequence_main_region_Increment_Time_default() {
		entryAction_main_region_Increment_Time();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Increment_Time;
	}
	
	/* 'default' enter sequence for state Vilagos */
	private void enterSequence_main_region_Vilagos_default() {
		entryAction_main_region_Vilagos();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Vilagos;
	}
	
	/* 'default' enter sequence for state Sotet */
	private void enterSequence_main_region_Sotet_default() {
		entryAction_main_region_Sotet();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Sotet;
	}
	
	/* 'default' enter sequence for state Vilagos lejart */
	private void enterSequence_main_region_Vilagos_lejart_default() {
		entryAction_main_region_Vilagos_lejart();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Vilagos_lejart;
	}
	
	/* 'default' enter sequence for state Sotet lejart */
	private void enterSequence_main_region_Sotet_lejart_default() {
		entryAction_main_region_Sotet_lejart();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Sotet_lejart;
	}
	
	/* 'default' enter sequence for state Game over */
	private void enterSequence_main_region_Game_over_default() {
		entryAction_main_region_Game_over();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Game_over;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Kezdeti */
	private void exitSequence_main_region_Kezdeti() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state White Initial Time */
	private void exitSequence_main_region_White_Initial_Time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Black Initial Time */
	private void exitSequence_main_region_Black_Initial_Time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Increment Time */
	private void exitSequence_main_region_Increment_Time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Vilagos */
	private void exitSequence_main_region_Vilagos() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Vilagos();
	}
	
	/* Default exit sequence for state Sotet */
	private void exitSequence_main_region_Sotet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Sotet();
	}
	
	/* Default exit sequence for state Vilagos lejart */
	private void exitSequence_main_region_Vilagos_lejart() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Sotet lejart */
	private void exitSequence_main_region_Sotet_lejart() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Game over */
	private void exitSequence_main_region_Game_over() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Kezdeti:
			exitSequence_main_region_Kezdeti();
			break;
		case main_region_White_Initial_Time:
			exitSequence_main_region_White_Initial_Time();
			break;
		case main_region_Black_Initial_Time:
			exitSequence_main_region_Black_Initial_Time();
			break;
		case main_region_Increment_Time:
			exitSequence_main_region_Increment_Time();
			break;
		case main_region_Vilagos:
			exitSequence_main_region_Vilagos();
			break;
		case main_region_Sotet:
			exitSequence_main_region_Sotet();
			break;
		case main_region_Vilagos_lejart:
			exitSequence_main_region_Vilagos_lejart();
			break;
		case main_region_Sotet_lejart:
			exitSequence_main_region_Sotet_lejart();
			break;
		case main_region_Game_over:
			exitSequence_main_region_Game_over();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Kezdeti_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Kezdeti_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_main_region_Kezdeti();
				sCIBeeper.operationCallback.beep();
				
				enterSequence_main_region_White_Initial_Time_default();
				react();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_main_region_Kezdeti();
					sCIDisplay.setWhiteDisplay(feherinitial);
					
					sCIDisplay.setBlackDisplay(feketeinitial);
					
					enterSequence_main_region_Vilagos_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_White_Initial_Time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_main_region_White_Initial_Time();
				sCIBeeper.operationCallback.beep();
				
				sCIDisplay.setBlackDisplay(feketetemp);
				
				enterSequence_main_region_Black_Initial_Time_default();
				react();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_main_region_White_Initial_Time();
					enterSequence_main_region_Kezdeti_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (((sCIButtons.blackButton) && (getFeherinitial()>=35))) {
				sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() - 5);
				
				setFeherinitial(getFeherinitial() - 5);
			}
			if (((sCIButtons.blackButton) && (getFeherinitial()<35))) {
				sCIBeeper.operationCallback.beep();
			}
			if (((sCIButtons.whiteButton) && (getFeherinitial()<=175))) {
				sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() + 5);
				
				setFeherinitial(getFeherinitial() + 5);
			}
			if (((sCIButtons.whiteButton) && (getFeherinitial()>175))) {
				sCIBeeper.operationCallback.beep();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Black_Initial_Time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_main_region_Black_Initial_Time();
				sCIBeeper.operationCallback.beep();
				
				sCIDisplay.setWhiteDisplay(fehertemp);
				
				enterSequence_main_region_Increment_Time_default();
				react();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_main_region_Black_Initial_Time();
					enterSequence_main_region_Kezdeti_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (((sCIButtons.blackButton) && (getFeketeinitial()>=35))) {
				sCIDisplay.setBlackDisplay(sCIDisplay.getBlackDisplay() - 5);
				
				setFeketeinitial(getFeketeinitial() - 5);
			}
			if (((sCIButtons.blackButton) && (getFeketeinitial()<35))) {
				sCIBeeper.operationCallback.beep();
			}
			if (((sCIButtons.whiteButton) && (getFeketeinitial()<=175))) {
				sCIDisplay.setBlackDisplay(sCIDisplay.getBlackDisplay() + 5);
				
				setFeketeinitial(getFeketeinitial() + 5);
			}
			if (((sCIButtons.whiteButton) && (getFeketeinitial()>175))) {
				sCIBeeper.operationCallback.beep();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Increment_Time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCIButtons.modeButton || sCIButtons.startButton)) {
				exitSequence_main_region_Increment_Time();
				sCIBeeper.operationCallback.beep();
				
				enterSequence_main_region_Kezdeti_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (((sCIButtons.blackButton) && (getIncrement()>0))) {
				sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() - 1);
				
				setIncrement(getIncrement() - 1);
			}
			if (((sCIButtons.blackButton) && (getIncrement()<=0))) {
				sCIBeeper.operationCallback.beep();
			}
			if (((sCIButtons.whiteButton) && (getIncrement()<30))) {
				sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() + 1);
				
				setIncrement(getIncrement() + 1);
			}
			if (((sCIButtons.whiteButton) && (getIncrement()>=30))) {
				sCIBeeper.operationCallback.beep();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Vilagos_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.whiteButton) {
				exitSequence_main_region_Vilagos();
				enterSequence_main_region_Sotet_default();
				react();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_main_region_Vilagos();
					enterSequence_main_region_Kezdeti_default();
					react();
				} else {
					if (((timeEvents[0]) && (sCIDisplay.getWhiteDisplay()<=0))) {
						exitSequence_main_region_Vilagos();
						enterSequence_main_region_Vilagos_lejart_default();
						react();
					} else {
						if (sCIButtons.modeButton) {
							exitSequence_main_region_Vilagos();
							enterSequence_main_region_Game_over_default();
							react();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			if (((timeEvents[1]) && (sCIDisplay.getWhiteDisplay()!=0))) {
				sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() - 1);
			}
			if (((timeEvents[2]) && (sCIDisplay.getWhiteDisplay()<=5))) {
				sCIBeeper.operationCallback.beep();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Sotet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_main_region_Sotet();
				enterSequence_main_region_Vilagos_default();
				react();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_main_region_Sotet();
					enterSequence_main_region_Kezdeti_default();
					react();
				} else {
					if (((timeEvents[3]) && (sCIDisplay.getBlackDisplay()<=0))) {
						exitSequence_main_region_Sotet();
						enterSequence_main_region_Sotet_lejart_default();
						react();
					} else {
						if (sCIButtons.modeButton) {
							exitSequence_main_region_Sotet();
							enterSequence_main_region_Game_over_default();
							react();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			if (((timeEvents[4]) && (sCIDisplay.getBlackDisplay()!=0))) {
				sCIDisplay.setBlackDisplay(sCIDisplay.getBlackDisplay() - 1);
			}
			if (((timeEvents[5]) && (sCIDisplay.getBlackDisplay()<=5))) {
				sCIBeeper.operationCallback.beep();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Vilagos_lejart_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_main_region_Vilagos_lejart();
				enterSequence_main_region_Kezdeti_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Sotet_lejart_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_main_region_Sotet_lejart();
				enterSequence_main_region_Kezdeti_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Game_over_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_main_region_Game_over();
				enterSequence_main_region_Kezdeti_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
